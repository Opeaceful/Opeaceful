<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">

	 <resultMap type="member" id="AllmemberResultSet">
	  	<id column="USER_NO" property="userNo"/>
	  	<result column="ENO" property="eno"/>
	  	<result column="STATUS" property="status"/>
	  	<result column="PROFILE_IMG" property="profileImg"/>
	  	<result column="STATUS_TYPE" property="statusType"/> 	
	  	<result column="USER_PWD" property="userPwd"/>
	  	<result column="USER_NAME" property="userName"/> 	
	  	<result column="PHONE" property="phone"/> 	
	  	<result column="EXTENSION" property="extension"/> 	
	  	<result column="EMAIL" property="email"/> 	
	  	<result column="ADDRESS" property="address"/> 	
	  	<result column="ANNUAL_LEAVE_COUNT" property="annualLeaveCount"/> 	
	  	<result column="HIRE_DATE" property="hireDate"/>
	  	
	  	<result column="S_HIRE_DATE" property="ShireDate"/> 
	  	<result column="RESIGNED_DATE" property="ResignedDate"/>
	  	
	  	<result column="P_NAME" property="pName"/> 
	  	<result column="DEPT_NAME" property="dName"/> 
	  	<result column="ROOM_TITLE" property="roomTitle"/>
	  	
	</resultMap>
	
	<!--지영: 수정용 ResultSet -->
	 <resultMap type="member" id="UpdatememberResultSet">
	  	<id column="USER_NO" property="userNo"/>
	  	<result column="ENO" property="eno" />
	  	<result column="STATUS" property="status"/>	
	  	<result column="USER_NAME" property="userName"/> 	
	  	<result column="PHONE" property="phone"/> 	
	  	<result column="EXTENSION" property="extension"/> 	
	  	<result column="EMAIL" property="email"/> 	
	  	<result column="ADDRESS" property="address"/> 	
	  	<result column="ANNUAL_LEAVE_COUNT" property="annualLeaveCount"/> 	
	  	
	  	<result column="S_HIRE_DATE" property="ShireDate"/> 
	  	
	  	<result column="P_CODE" property="pCode"/> 
	  	<result column="DEPT_CODE" property="deptCode"/> 
	  	<result column="P_NAME" property="pName"/> 
	  	<result column="DEPT_NAME" property="dName"/> 
	  	
	</resultMap>
	
	<!--[지영] 전체 조회용-->
	 <resultMap type="member" id="AllmemberVIewResultSet">
	  	<id column="USER_NO" property="userNo"/>
	  	<result column="USER_NAME" property="userName"/> 	
	  	<result column="P_CODE" property="pCode"/> 
	  	<result column="DEPT_CODE" property="deptCode"/> 
	  	<result column="P_NAME" property="pName"/> 
	  	<result column="DEPT_NAME" property="dName"/>   	
	</resultMap>
	
	<!--[지의] 유저 연차 조회용-->
 	<resultMap type="member" id="UserAnnaulResultSet">
	  	<id column="USER_NO" property="userNo"/>
	  	<result column="USER_NAME" property="userName"/> 	
	  	<result column="ANNUAL_LEAVE_COUNT" property="annualLeaveCount"/> 	
	  	<result column="HIRE_DATE" property="hireDate"/>
	  	<result column="P_NAME" property="pName"/> 
	  	<result column="DEPT_NAME" property="dName"/>
	  	<result column="TOP_DEPT_NAME" property="topDeptName"/>
	</resultMap>
	
	<!-- [가영] 명함 사원 정보 조회용 -->
	<resultMap type="member" id="businessCardResultSet">
	  	<id column="USER_NO" property="userNo"/>
	  	<result column="PROFILE_IMG" property="profileImg"/> 	
	  	<result column="USER_NAME" property="userName"/> 	
	  	<result column="P_NAME" property="pName"/> 
	  	<result column="TOP_DEPT_NAME" property="topDeptName"/>
	  	<result column="DEPT_NAME" property="dName"/>
	  	<result column="EMAIL" property="email"/> 	
	  	<result column="PHONE" property="phone"/> 	
	  	<result column="EXTENSION" property="extension"/> 	
	</resultMap>

	<!-- =================== [insert] =================== -->	
	<!-- [지영] member insert구문 -->
	<!--[지영] member insert -->
	<insert id="insertMember" parameterType="member" useGeneratedKeys="true"  >
	
		<selectKey keyProperty="eno" resultType="_int" order="BEFORE">
	 		SELECT CAST(CONCAT(DATE_FORMAT(CURRENT_DATE, '%y'), LPAD(MONTH(CURRENT_DATE), 2, '0'), LPAD(RIGHT((SELECT ENO FROM MEMBER ORDER BY ENO DESC LIMIT 1), 2)+1, 2, '0' ))AS SIGNED)
	 	</selectKey>
	
		INSERT INTO MEMBER(ENO,STATUS_TYPE, USER_PWD, USER_NAME ,PHONE,EXTENSION, EMAIL,ADDRESS, HIRE_DATE)
	   	VALUES(
	   	#{eno},
	   	0,
	   	#{userPwd},
	   	#{userName},
	   	#{phone},
	   	#{extension},
	   	#{email},
	   	#{address},
	   	#{hireDate})
	  		
	</insert>
	
	<!-- [지영] 2.dept insert -->
	<insert id="insertUserDept" parameterType="userDepartment" useGeneratedKeys="true">
		<selectKey keyProperty="userNo" resultType="_int" order="BEFORE">
	 		SELECT USER_NO FROM MEMBER ORDER BY USER_NO DESC LIMIT 1
	 	</selectKey>
	 	
	 	INSERT INTO USER_DEPARTMENT(USER_NO,P_CODE, DEPT_CODE)
	   	VALUES(
	   	#{userNo},
	   	#{pCode},
	   	#{deptCode})
	   	
	</insert>
	
	<!--[지영] 3.사용자에게 보여줄 eno select : insert에 딸린 select라 이쪽으로 넣어둠 -->	
	<select id="selectENO" resultType="_int" >
		SELECT ENO FROM MEMBER ORDER BY ENO DESC LIMIT 1
	</select>
	

	
	<!-- =================== [select] =================== -->	

	
	<!-- [지영] member select 구문 -->	
	 <select id="selectMember" resultMap="AllmemberResultSet" parameterType="hashMap">
		 <if test='Sselect == "Y"'>
	        SELECT USER_NO, ENO, USER_PWD, USER_NAME, PHONE, EXTENSION, EMAIL, ADDRESS, ANNUAL_LEAVE_COUNT, 
	        DATE_FORMAT(HIRE_DATE, '%Y-%m-%d') S_HIRE_DATE, P_NAME, DEPT_NAME
	    </if>
	    <if test='Sselect == "N"'>
	        SELECT USER_NO, ENO, USER_PWD, USER_NAME, PHONE, EXTENSION, EMAIL, ADDRESS, ANNUAL_LEAVE_COUNT, 
	        DATE_FORMAT(HIRE_DATE, '%Y-%m-%d') S_HIRE_DATE, R.P_NAME, R.T_NAME AS DEPT_NAME, RESIGNED_DATE 
	    </if>
		FROM MEMBER
		LEFT JOIN USER_DEPARTMENT USING(USER_NO)
	    LEFT JOIN DEPARTMENT USING(DEPT_CODE)
	    LEFT JOIN POSITION USING(P_CODE)
	    <if test='Sselect == "N"'>
			LEFT JOIN RESIGNED_MEMBER R USING(USER_NO)
		</if>
		WHERE STATUS = #{Sselect}
		    <if test='Dselect != null'>
		      AND DEPT_CODE = #{Dselect}
		    </if>
		    <if test='Pselect != null'>
		      AND P_CODE = #{Pselect}
		    </if>
	 </select>
	 
	
		 
	 
	 <!-- 페이징용 count 체크 -->
	 <select id="selectMemberCount"  resultType="_int" parameterType="hashMap">
		SELECT COUNT(*)
		FROM MEMBER
		LEFT JOIN USER_DEPARTMENT USING(USER_NO)
	    LEFT JOIN DEPARTMENT USING(DEPT_CODE)
	    LEFT JOIN POSITION USING(P_CODE)
		WHERE STATUS = #{Sselect}
		    <if test='Dselect != null '>
		      AND DEPT_CODE = #{Dselect}
		    </if>
		    <if test='Pselect != null'>
		      AND P_CODE = #{Pselect}
		    </if>
	 </select>
	 
	 <!-- [지영] 사용자 수정용 조회 -->
	 <select id="selectMemberOne" parameterType="_int" resultMap="UpdatememberResultSet">
	 	SELECT USER_NO, ENO,STATUS,USER_NAME,PHONE,EXTENSION,EMAIL,ADDRESS,ANNUAL_LEAVE_COUNT,DATE_FORMAT( HIRE_DATE, '%Y-%m-%d' )S_HIRE_DATE,P_CODE,DEPT_CODE,P_NAME,DEPT_NAME
		FROM MEMBER
		LEFT JOIN USER_DEPARTMENT USING(USER_NO)
		LEFT JOIN DEPARTMENT USING(DEPT_CODE)
	    LEFT JOIN POSITION USING(P_CODE)
		WHERE USER_NO = #{userNo}
	 </select>
	 

	 <!--[지영] 모달용 전체조회 -->
	 <select id="modalAllMemberView" resultMap="AllmemberVIewResultSet" >
	 	SELECT USER_NO,USER_NAME,P_CODE,DEPT_CODE,P_NAME,DEPT_NAME, ENO
		FROM MEMBER
		LEFT JOIN USER_DEPARTMENT USING(USER_NO)
		LEFT JOIN DEPARTMENT USING(DEPT_CODE)
	    LEFT JOIN POSITION USING(P_CODE)
		WHERE STATUS = 'Y' 
		 <if test='keyword != null and keyword !=""'>
		      AND USER_NAME LIKE '%${keyword}%'
		 </if>
		ORDER BY DEPT_CODE, P_CODE
	 </select>
	 
	 <!--[지영] check 박스로 조회된 인원만 select-->
	 <select id="checkMemberNoSelect"  resultMap="AllmemberResultSet" >
	 	SELECT USER_NO, ENO, USER_PWD, USER_NAME,PHONE,EXTENSION,EMAIL,ADDRESS,ANNUAL_LEAVE_COUNT,DATE_FORMAT( HIRE_DATE, '%Y-%m-%d' )S_HIRE_DATE,P_NAME,DEPT_NAME
		FROM MEMBER
		LEFT JOIN USER_DEPARTMENT USING(USER_NO)
	    LEFT JOIN DEPARTMENT USING(DEPT_CODE)
	    LEFT JOIN POSITION USING(P_CODE)
		WHERE USER_NO IN 
		<foreach item="userNo" collection="array"
		       separator="," open="(" close=")">
		       #{userNo}
		</foreach>
		
	 </select> 
	 
	 <!--[지영] check 박스로 조회된 인원만 select : salray용-->
	 <select id="checkMemberNoSelectSalary"  resultMap="AllmemberVIewResultSet" >
	 	SELECT  USER_NO,USER_NAME,P_CODE,DEPT_CODE,P_NAME,DEPT_NAME
		FROM MEMBER
		LEFT JOIN USER_DEPARTMENT USING(USER_NO)
	    LEFT JOIN DEPARTMENT USING(DEPT_CODE)
	    LEFT JOIN POSITION USING(P_CODE)
		WHERE USER_NO IN 
		<foreach item="userNo" collection="array"
		       separator="," open="(" close=")">
		       #{userNo}
		</foreach>
		
	 </select> 

	<!-- [지의] 로그인유저 -->
	<select id="loginMember" parameterType="member" resultMap="AllmemberResultSet">
		SELECT *
		  FROM MEMBER
		LEFT JOIN USER_DEPARTMENT USING(USER_NO)
	    LEFT JOIN DEPARTMENT USING(DEPT_CODE)
	    LEFT JOIN POSITION USING(P_CODE)
		 WHERE ENO = #{eno}
		   AND STATUS = 'Y';
	</select>
	
	<!-- [지의] 탈퇴회원 조회 -->
	<select id="selectLoginStatus" resultType="string">
		SELECT STATUS
		  FROM MEMBER
		 WHERE ENO = #{eno};
	</select>

	
	<!-- [지의] 유저 연차 조회 -->
	<select id="selectUserAnnaul" resultMap="UserAnnaulResultSet" parameterType="_int">
        SELECT USER_NO,
			   USER_NAME,
			   DEPT_NAME,
               P_NAME,
               HIRE_DATE,
               ANNUAL_LEAVE_COUNT,
               (SELECT DEPT_NAME
				FROM DEPARTMENT
				WHERE DEPT_CODE = (SELECT TOP_DEPT_CODE
									 FROM DEPARTMENT
									 JOIN USER_DEPARTMENT USING (DEPT_CODE)
									WHERE USER_NO = #{userNo})) AS TOP_DEPT_NAME
		FROM MEMBER
		LEFT JOIN USER_DEPARTMENT USING (USER_NO)
        LEFT JOIN DEPARTMENT USING (DEPT_CODE)
	    LEFT JOIN POSITION USING(P_CODE)
        WHERE USER_NO = #{userNo}
        AND STATUS = 'Y';
	</select>
	
	<!-- [지의] member 연차갯수 조회 -->
	<select id="selectAnnualMembers" resultType="member">
		SELECT USER_NO, ANNUAL_LEAVE_COUNT, ANNUAL_UNIT
		  FROM MEMBER M
		  JOIN ANNUAL A
		 WHERE YEAR(now()) - YEAR(HIRE_DATE) = A.YEAR;
	</select>
	
	<!-- [진기]-->
	<select id="adminAll" resultMap="AllmemberResultSet">
	 	SELECT M.*, D.DEPT_NAME, P.P_NAME
		FROM MEMBER M
		JOIN USER_DEPARTMENT UD ON M.USER_NO = UD.USER_NO
		JOIN DEPARTMENT D ON UD.DEPT_CODE = D.DEPT_CODE
		JOIN POSITION P ON UD.P_CODE = P.P_CODE
		WHERE STATUS='Y';
	 </select>
	 
	 <!-- [진기] 채팅방 참여유저 정보용-->
	 <select id="getChatRoomParticipants" resultMap="AllmemberResultSet">
    	SELECT M.USER_NO, M.ENO, M.PROFILE_IMG, M.STATUS_TYPE,
		       M.USER_NAME, M.PHONE, M.EXTENSION, M.EMAIL, M.ADDRESS,
			   M.ANNUAL_LEAVE_COUNT, M.HIRE_DATE, P.P_NAME, D.DEPT_NAME, CP.ROOM_TITLE
	    FROM CHAT_PARTICIPANT CP
	    JOIN MEMBER M ON CP.USER_NO = M.USER_NO
	    JOIN USER_DEPARTMENT UD ON M.USER_NO = UD.USER_NO
	    JOIN POSITION P ON UD.P_CODE = P.P_CODE
	    JOIN DEPARTMENT D ON UD.DEPT_CODE = D.DEPT_CODE
	    WHERE CP.CHATROOM_NO = #{chatRoomNo}
	  </select>
	  

	 <!-- [가영] 명함에 들어갈 사원 정보 -->
	 <select id="businessCard" resultMap="businessCardResultSet">
	 	SELECT PROFILE_IMG, USER_NAME, P_NAME, T.DEPT_NAME AS "TOP_DEPT_NAME", D.DEPT_NAME, EMAIL, PHONE, EXTENSION
		FROM MEMBER M
		LEFT JOIN USER_DEPARTMENT UD ON M.USER_NO = UD.USER_NO
		LEFT JOIN DEPARTMENT D ON UD.DEPT_CODE = D.DEPT_CODE
		LEFT JOIN DEPARTMENT T ON (D.TOP_DEPT_CODE = T.DEPT_CODE)
		LEFT JOIN POSITION P ON UD.P_CODE = P.P_CODE
		WHERE M.USER_NO = #{userNo};
	 </select>
	 
	
	<!-- =================== [update] =================== -->

	<!-- [MEMBER] 비밀번호 변경 -->
	<update id="updatePwd" parameterType="member">
		UPDATE MEMBER
		   SET USER_PWD = #{userPwd}
		 WHERE ENO = #{eno}
	</update>
	
	<!-- [지의] 내정보변경 -->
	<update id="updateMember" parameterType="member">
		UPDATE MEMBER
		   SET PHONE = #{phone},
			   EXTENSION = #{extension},
			   ADDRESS = #{address},
			   EMAIL = #{email}
			   <if test="profileImg != null">
			   ,PROFILE_IMG = #{profileImg}
			   </if>
		 WHERE USER_NO = #{userNo}
	</update>

	<!-- [지영] 사용자 Update-->
	 <!--[지영] 1. 멤버 업데이트 -->
	 <update id="updateAllmember" parameterType="member" >
	 	UPDATE MEMBER
	 	SET USER_NAME = #{userName},
	 		PHONE     = #{phone},
	 		EXTENSION = #{extension},
	 		EMAIL = #{email},
	 		ADDRESS = #{address},
	 		ANNUAL_LEAVE_COUNT = #{annualLeaveCount},
	 		HIRE_DATE = #{hireDate}
	 		<if test="status != null">
			   ,STATUS = #{status}
			</if>
	 	WHERE USER_NO = #{userNo}
	 </update>
	 
	  <!--[지영] 2. 부서 업데이트 -->
	 <update id="updateUserDept" parameterType="member" >
	 	UPDATE USER_DEPARTMENT 
	 	SET P_CODE = #{pCode},
	 		DEPT_CODE  = #{deptCode}
	 	WHERE USER_NO = #{userNo}
	 </update>

	<!-- [지의] 온라인 > 접속상태 업데이트 -->
	<update id="updateOnlineStatus">
		UPDATE MEMBER
		SET STATUS_TYPE = 1
		WHERE USER_NO = #{userNo};
	</update>
	
	<!-- [지의] 오프라인 > 접속상태 업데이트 -->
	<update id="updateOfflineStatus">
		UPDATE MEMBER
		SET STATUS_TYPE = 0
		WHERE USER_NO = #{userNo};
	</update>
	
	<!-- [지의] 유저 접속상태 변경 -->
	<update id="updateStatusType">
		UPDATE MEMBER
		SET STATUS_TYPE = #{statusType}
		WHERE USER_NO = #{userNo};
	</update>
	
	<!-- [지의] 유저 연차 수정  -->
	<update id="updateUserAnnual" parameterType="map">
		UPDATE MEMBER
		SET ANNUAL_LEAVE_COUNT = #{annualLeaveCount}
		WHERE USER_NO = #{userNo}
	</update>

	<!-- [지의] 매년 1월 1일 연차 리셋 -->
	<update id="updateAnnualMembers" parameterType="java.util.List">
		<foreach collection="list" item="member" separator=";">
		UPDATE MEMBER
		SET ANNUAL_LEAVE_COUNT = #{member.annualUnit}
		WHERE USER_NO = #{member.userNo}
		</foreach>
	</update>
	
	<!-- [지의] 연차테이블 수정 시 개인 연차갯수 업데이트 -->
	<update id="updateMemberAnnualCountByYear" parameterType="annual">
		UPDATE MEMBER
		SET ANNUAL_LEAVE_COUNT = #{annualUnit}
		WHERE (SELECT YEAR(NOW()) - YEAR(HIRE_DATE)) = #{year};
	</update>


	<!-- =================== [delete] =================== -->
  	<!-- [지영] 3년이 지난 유저 데이터 삭제 -->
  	<delete id="deleteMembers" parameterType="java.util.List">
  		<foreach collection="list" item="uesrNo" >
	  		DELETE FROM BOARD_REPLY
			WHERE USER_NO = #{uesrNo};
		    
		    DELETE FROM BOARD 
			WHERE BOARD_WRITER = #{uesrNo} AND BOARD_CD = 'F';
		    
			DELETE FROM USER_DEPARTMENT 
			WHERE USER_NO = #{uesrNo};
		    
			DELETE FROM SIGNATURE_IMG 
		    WHERE USER_NO = #{uesrNo};
		    
			DELETE FROM MEMBER 
			WHERE USER_NO = #{uesrNo};
		</foreach>	
  	</delete> 


</mapper>
