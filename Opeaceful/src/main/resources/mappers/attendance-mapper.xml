<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="attendanceMapper">

	<!-- =================== [select] =================== -->	
	<!-- [지의] 출퇴근 테이블 조회 > main에서 출퇴근 여부 판별 -->
	<select id="selectWorkOn" resultType="attendance" parameterType="_int">
		SELECT *
		  FROM ATTENDANCE
		 WHERE USER_NO = #{userNo}
		   AND DATE(WORK_DATE) = DATE(NOW()); <!-- 오늘날짜인지 비교 -->
	</select>
		
	<!-- [지의] 온라인 접속 상태 리스트 조회 -->
	<select id="onlineStatusList" resultType="onlineStatus">
		SELECT *
		FROM ONLINE_STATUS;
	</select>
	
	<!-- [가영] 로그인한 사원의 출퇴근 리스트 카운트 -->
	<select id="selectAttendanceListCount" resultType="_int">
		WITH RECURSIVE DATE_RANGE AS (
		    SELECT CURDATE() AS date
		    UNION ALL
		    SELECT DATE - INTERVAL 1 DAY
		    FROM DATE_RANGE
		    WHERE DATE > #{startDate} 
		)
		SELECT COUNT(*) AS COUNT
		FROM (
			SELECT *,
			    TIMEDIFF(WORK_OFF, WORK_ON) AS TOTAL_WORK_TIME
			FROM (
			    SELECT D.DATE AS DATE, A.WORK_DATE, COALESCE(A.USER_NO ,test.USER_NO) AS USER_NO, COALESCE(M.USER_NAME ,TEST.USER_NAME) AS USER_NAME, A.WORK_ON, A.WORK_OFF, APPROVAL_NO, TYPE, TEST.STATUS, START_DATE, END_DATE
			    FROM DATE_RANGE D
			    LEFT JOIN (
					SELECT * FROM ATTENDANCE WHERE USER_NO = #{userNo}
					) A ON D.date = A.WORK_DATE
			    LEFT JOIN MEMBER M ON A.USER_NO = M.USER_NO
			    LEFT JOIN (
			        SELECT D.DATE AS DATE, APP.USER_NO AS USER_NO, M.USER_NAME AS USER_NAME , APP.APPROVAL_NO, APP.TYPE, APP.STATUS, APP.START_DATE, APP.END_DATE
			        FROM DATE_RANGE D
			        LEFT JOIN APPROVAL APP ON D.DATE >= APP.START_DATE AND APP.END_DATE >=  D.DATE 
			        LEFT JOIN MEMBER M ON APP.USER_NO = M.USER_NO
			        WHERE D.DATE >= #{startDate} 
			            AND #{endDate} >= D.DATE  
			            AND APP.USER_NO = #{userNo}
			    ) TEST ON (D.DATE = TEST.DATE)
			    WHERE D.DATE >= #{startDate} 
			        AND #{endDate} >= D.DATE  
			) AS RESULT
		) AS COUNT_RESULT
	</select>
	
	<!-- [가영] 로그인한 사원의 출퇴근 조회 -->
	<select id="selectUserAttendance" resultType="attendance" parameterType="hashMap">
		WITH RECURSIVE DATE_RANGE AS (
		    SELECT CURDATE() AS date
		    UNION ALL
		    SELECT DATE - INTERVAL 1 DAY
		    FROM DATE_RANGE
		    WHERE DATE > #{startDate} 
		)
		SELECT *,
		    TIMEDIFF(WORK_OFF, WORK_ON) AS TOTAL_WORK_TIME
		FROM (
		    SELECT D.DATE AS DATE, A.WORK_DATE, COALESCE(A.USER_NO ,test.USER_NO) AS USER_NO, COALESCE(M.USER_NAME ,TEST.USER_NAME) AS USER_NAME, A.WORK_ON, A.WORK_OFF, APPROVAL_NO, TYPE, TEST.STATUS, START_DATE, END_DATE
		    FROM DATE_RANGE D
		    LEFT JOIN (
				SELECT * FROM ATTENDANCE WHERE USER_NO = #{userNo}
				) A ON D.date = A.WORK_DATE
		    LEFT JOIN MEMBER M ON A.USER_NO = M.USER_NO
		    LEFT JOIN (
		        SELECT D.DATE AS DATE, APP.USER_NO AS USER_NO, M.USER_NAME AS USER_NAME , APP.APPROVAL_NO, APP.TYPE, APP.STATUS, APP.START_DATE, APP.END_DATE
		        FROM DATE_RANGE D
		        LEFT JOIN APPROVAL APP ON D.DATE >= APP.START_DATE AND APP.END_DATE >=  D.DATE 
		        LEFT JOIN MEMBER M ON APP.USER_NO = M.USER_NO
		        WHERE D.DATE >= #{startDate} 
		            AND #{endDate} >= D.DATE  
		            AND APP.USER_NO = #{userNo}
		    ) TEST ON (D.DATE = TEST.DATE)
		    WHERE D.DATE >= #{startDate} 
		        AND #{endDate} >= D.DATE  
		) AS RESULT
		ORDER BY DATE ASC
	</select>
	
	<!-- [가영] 조회한 모든 사원의 출퇴근 조회 -->
	<select id="selectAllUserAttendance" resultType="attendance" parameterType="hashMap">
		WITH RECURSIVE DATE_RANGE AS (
		    SELECT CURDATE() AS date
		    UNION ALL
		    SELECT DATE - INTERVAL 1 DAY
		    FROM DATE_RANGE
		    WHERE DATE > #{startDate} 
		)
		SELECT *,
		    TIMEDIFF(WORK_OFF, WORK_ON) AS TOTAL_WORK_TIME
		FROM (
		    SELECT D.DATE AS DATE, A.WORK_DATE, COALESCE(A.USER_NO ,test.USER_NO) AS USER_NO, COALESCE(M.USER_NAME ,TEST.USER_NAME) AS USER_NAME, A.WORK_ON, A.WORK_OFF, APPROVAL_NO, TYPE, TEST.STATUS, START_DATE, END_DATE
		    FROM DATE_RANGE D
		    LEFT JOIN (
				SELECT * FROM ATTENDANCE
				) A ON D.date = A.WORK_DATE
		    LEFT JOIN MEMBER M ON A.USER_NO = M.USER_NO
		    LEFT JOIN (
		        SELECT D.DATE AS DATE, APP.USER_NO AS USER_NO, M.USER_NAME AS USER_NAME , APP.APPROVAL_NO, APP.TYPE, APP.STATUS, APP.START_DATE, APP.END_DATE
		        FROM DATE_RANGE D
		        LEFT JOIN APPROVAL APP ON D.DATE >= APP.START_DATE AND APP.END_DATE >=  D.DATE 
		        LEFT JOIN MEMBER M ON APP.USER_NO = M.USER_NO
		        WHERE D.DATE >= #{startDate} 
		            AND #{endDate} >= D.DATE
		            <if test='no != null'>
						AND APP.USER_NO IN 
						<foreach item="uno" collection="no"
							separator="," open="(" close=")">
							#{uno}
						</foreach>
					</if>
					<if test = 'status != null'>
						AND APP.STATUS = 1
					</if>
		    ) TEST ON (D.DATE = TEST.DATE)
		    WHERE D.DATE >= #{startDate} 
		        AND #{endDate} >= D.DATE  
		) AS RESULT
		ORDER BY DATE ASC
		<where>
		    
		</where>
	</select>
	
	<!-- [가영] 조회한 모든 사원의 출퇴근 리스트 카운트 -->
	<select id="selectAttendanceAllListCount" resultType="_int">
		WITH RECURSIVE DATE_RANGE AS (
		    SELECT CURDATE() AS date
		    UNION ALL
		    SELECT DATE - INTERVAL 1 DAY
		    FROM DATE_RANGE
		    WHERE DATE > #{startDate} 
		    	<if test="startDate == null">
		    		#{startDate} = #{startDate}
		    	</if>
		)
		SELECT COUNT(*) AS COUNT
		FROM (
			SELECT *,
			    TIMEDIFF(WORK_OFF, WORK_ON) AS TOTAL_WORK_TIME
			FROM (
			    SELECT D.DATE AS DATE, A.WORK_DATE, COALESCE(A.USER_NO ,test.USER_NO) AS USER_NO, COALESCE(M.USER_NAME ,TEST.USER_NAME) AS USER_NAME, A.WORK_ON, A.WORK_OFF, APPROVAL_NO, TYPE, TEST.STATUS, START_DATE, END_DATE
			    FROM DATE_RANGE D
			    LEFT JOIN (
					SELECT * FROM ATTENDANCE
					) A ON D.date = A.WORK_DATE
			    LEFT JOIN MEMBER M ON A.USER_NO = M.USER_NO
			    LEFT JOIN (
			        SELECT D.DATE AS DATE, APP.USER_NO AS USER_NO, M.USER_NAME AS USER_NAME , APP.APPROVAL_NO, APP.TYPE, APP.STATUS, APP.START_DATE, APP.END_DATE
			        FROM DATE_RANGE D
			        LEFT JOIN APPROVAL APP ON D.DATE >= APP.START_DATE AND APP.END_DATE >=  D.DATE 
			        LEFT JOIN MEMBER M ON APP.USER_NO = M.USER_NO
			        WHERE D.DATE >= #{startDate} 
			            AND #{endDate} >= D.DATE  
			            <if test='no != null'>
							AND APP.USER_NO IN 
							<foreach item="uno" collection="no"
								separator="," open="(" close=")">
								#{uno}
							</foreach>
						</if>
						<if test = 'status != null'>
							AND APP.STATUS = 1
						</if>
			    ) TEST ON (D.DATE = TEST.DATE)
			    WHERE D.DATE >= #{startDate} 
			        AND #{endDate} >= D.DATE  
			) AS RESULT
		) AS COUNT_RESULT
	</select>

	<!-- =================== [insert] =================== -->	
	<!-- [지의] 출근 시간 등록 -->
	<insert id="insertWorkOn">
		insert into attendance(WORK_DATE, USER_NO, WORK_ON)
		values (DATE_FORMAT(now(),'%Y-%m-%d'), #{userNo}, DATE_FORMAT(now(),'%H:%i'));
	</insert>
	
	<!-- =================== [update] =================== -->	
	<!-- [지의] 퇴근 시간 등록 -->
	<update id="updateWorkOff">
		UPDATE attendance
		   SET WORK_OFF = DATE_FORMAT(now(),'%H:%i')
		 WHERE USER_NO = #{userNo}
		   AND WORK_DATE IS NOT NULL
		   AND WORK_ON IS NOT NULL
		   AND DATE(WORK_DATE) = DATE(NOW());
	</update>

	
</mapper>
